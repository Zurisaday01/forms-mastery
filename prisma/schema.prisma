// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider   = "prisma-client-js"
  engineType = "library"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum UserStatus {
  ACTIVE
  BLOCKED
}

model User {
  id            String     @id @default(cuid())
  firstName     String?
  lastName      String?
  email         String?    @unique
  password      String?
  role          UserRole   @default(USER)
  status        UserStatus @default(ACTIVE)
  sessions      Session[]
  emailVerified Boolean?   @default(true)
  accounts      Account[]
  templates     Template[]
  forms         Form[]
  comments      Comment[]

  likes    Like[]
  Dislike  Dislike[]
  Response Response[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Template {
  id          String  @id @default(cuid())
  authorId    String // Foreign key to User
  title       String  @db.VarChar(100)
  description String? @db.Text

  // Questions associated with the template
  questions Question[] // Questions related to this template
  forms     Form[] // Forms created from this template
  createdAt DateTime   @default(now()) // Automatically set to current date and time
  updatedAt DateTime   @updatedAt // Automatically set to current date and time
  comments  Comment[]
  likes     Like[]
  tags      Tag[]      @relation("TemplateTags")

  // Relation
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("templates")
}

model Form {
  id        String   @id @default(cuid())
  userId    String // Foreign key to User
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  questions Question[] // Questions included in this form

  // Template relation
  templateId String? // Foreign key to Template
  template   Template?  @relation(fields: [templateId], references: [id], onDelete: Cascade)
  Response   Response[]

  @@map("forms")
}

model Response {
  id         String   @id @default(cuid())
  userId     String // Foreign key to User
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  formId     String // Foreign key to Form
  form       Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  questionId String // Foreign key to Question
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answers    String[] // Array for answers
}

model Tag {
  id        String     @id @default(cuid())
  name      String     @unique // Tag name should be unique and stored in lowercase
  templates Template[] @relation("TemplateTags")

  @@map("tags")
}

model Comment {
  id         String   @id @default(cuid())
  content    String
  authorId   String
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  templateId String
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  likes     Like[]
  dislikes  Dislike[]

  @@map("comments")
}

model Like {
  id         String    @id @default(cuid()) // Unique identifier for each like
  userId     String // Foreign key to identify the user who liked
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade) // Relation to User model
  commentId  String? // Optional foreign key to identify the comment that was liked
  comment    Comment?  @relation(fields: [commentId], references: [id], onDelete: Cascade) // Relation to Comment model
  templateId String? // Optional foreign key to identify the template that was liked
  template   Template? @relation(fields: [templateId], references: [id], onDelete: Cascade) // Relation to Template model

  @@unique([userId, commentId]) // Ensures a user can only like a comment once
  @@unique([userId, templateId]) // Ensures a user can only like a template once
  @@map("likes") // Maps the model to the "likes" table in the database
}

model Dislike {
  id        String  @id @default(cuid()) // Unique identifier for each dislike
  userId    String // Foreign key to identify the user who disliked
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade) // Relation to User model
  commentId String // Foreign key to identify the comment that was disliked
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade) // Relation to Comment model

  @@unique([userId, commentId]) // Ensures a user can only dislike a comment once
  @@map("dislikes") // Maps the model to the "dislikes" table in the database
}

model Question {
  id         String  @id @default(cuid()) // Unique identifier for the question
  templateId String? // Foreign key to Template
  formId     String? // Foreign key to Form

  isVisible      Boolean    @default(true) // Visibility of the question in summary
  isRated        Boolean    @default(false) // Whether the question is rated
  title          String     @db.VarChar(150)
  description    String?    @db.Text
  answerType     AnswerType // Enum for answer type
  options        Json // Options for MCQs, etc.
  correctAnswers String[] // Array for correct answers

  // Template relation
  template Template?  @relation(fields: [templateId], references: [id])
  form     Form?      @relation(fields: [formId], references: [id])
  Response Response[]
}

enum AnswerType {
  short
  long
  number
  multipleChoice
  checkbox
}
